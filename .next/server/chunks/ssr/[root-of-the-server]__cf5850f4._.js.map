{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file://F%3A/REACT/DU%20AN%20TN/Pure-Botanica/src/app/user/context/AuthContext.tsx"],"sourcesContent":["// contexts/AuthContext.tsx\r\n\"use client\";\r\nimport { createContext, useState, useEffect, useContext } from \"react\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\ninterface AuthContextType {\r\n  isLoggedIn: boolean;\r\n  userInfo: {\r\n    id?: string;\r\n    email?: string;\r\n    role?: string; \r\n  } | null;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userInfo, setUserInfo] = useState<AuthContextType[\"userInfo\"]>(null);\r\n\r\n  useEffect(() => {\r\n    // Kiểm tra token trong localStorage khi component được mount\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      try {\r\n        const decoded = jwtDecode(token) as any;\r\n        setUserInfo({\r\n          id: decoded.id,\r\n          email: decoded.email,\r\n          role: decoded.role\r\n        });\r\n        setIsLoggedIn(true);\r\n      } catch (error) {\r\n        console.error(\"Invalid token:\", error);\r\n        logout();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"role\");\r\n    localStorage.removeItem(\"email\");\r\n    setIsLoggedIn(false);\r\n    setUserInfo(null);\r\n    window.location.href = \"/user\"; // Chuyển về trang chủ\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, userInfo, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n}"],"names":[],"mappings":"AAAA,2BAA2B;;;;;;AAE3B;AACA;AAFA;;;;AAcA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA+B;IAEtE,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,6DAA6D;QAC7D,MAAM,QAAQ,aAAa,OAAO,CAAC;QACnC,IAAI,OAAO;YACT,IAAI;gBACF,MAAM,UAAU,CAAA,GAAA,sJAAA,CAAA,YAAS,AAAD,EAAE;gBAC1B,YAAY;oBACV,IAAI,QAAQ,EAAE;oBACd,OAAO,QAAQ,KAAK;oBACpB,MAAM,QAAQ,IAAI;gBACpB;gBACA,cAAc;YAChB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,kBAAkB;gBAChC;YACF;QACF;IACF,GAAG,EAAE;IAEL,MAAM,SAAS;QACb,aAAa,UAAU,CAAC;QACxB,aAAa,UAAU,CAAC;QACxB,aAAa,UAAU,CAAC;QACxB,cAAc;QACd,YAAY;QACZ,OAAO,QAAQ,CAAC,IAAI,GAAG,SAAS,sBAAsB;IACxD;IAEA,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAY;YAAU;QAAO;kBACzD;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file://F%3A/REACT/DU%20AN%20TN/Pure-Botanica/src/app/components/Usermenu.tsx"],"sourcesContent":["// components/UserMenu.tsx\r\n\"use client\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport Link from \"next/link\";\r\nimport \"../user/login/login.css\"\r\n\r\nexport default function UserMenu() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [userEmail, setUserEmail] = useState(\"\");\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    // Kiểm tra token trong localStorage khi component được mount\r\n    const token = localStorage.getItem(\"token\");\r\n  \r\n    \r\n    if (token ) {\r\n      setIsLoggedIn(true);\r\n  \r\n    }\r\n\r\n    // Thêm sự kiện click bên ngoài để đóng dropdown\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"role\");\r\n    \r\n    setIsLoggedIn(false);\r\n    window.location.href = \"/user\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-menu-container\" ref={dropdownRef}>\r\n      <div className=\"user-icon\" onClick={() => isLoggedIn && setIsOpen(!isOpen)}>\r\n        <Link href={isLoggedIn ? \"#\" : \"/user/login\"}>\r\n          <i className=\"fa-solid fa-user\"></i>\r\n        </Link>\r\n      </div>\r\n      \r\n      {isLoggedIn && isOpen && (\r\n        <div className=\"user-dropdown\">\r\n       \r\n          <ul>\r\n            <li>\r\n              <Link href=\"/user/userinfo\">\r\n                <i className=\"fa-solid fa-user-circle\"></i> Thông tin khách hàng\r\n              </Link>\r\n            </li>\r\n            <li className=\"logout-item\">\r\n              <button onClick={handleLogout}>\r\n                <i className=\"fa-solid fa-sign-out-alt\"></i> Đăng xuất\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAE1B;AACA;AAFA;;;;;AAKe,SAAS;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IAE3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,6DAA6D;QAC7D,MAAM,QAAQ,aAAa,OAAO,CAAC;QAGnC,IAAI,OAAQ;YACV,cAAc;QAEhB;QAEA,gDAAgD;QAChD,MAAM,qBAAqB,CAAC;YAC1B,IAAI,YAAY,OAAO,IAAI,CAAC,YAAY,OAAO,CAAC,QAAQ,CAAC,MAAM,MAAM,GAAW;gBAC9E,UAAU;YACZ;QACF;QAEA,SAAS,gBAAgB,CAAC,aAAa;QACvC,OAAO,IAAM,SAAS,mBAAmB,CAAC,aAAa;IACzD,GAAG,EAAE;IAEL,MAAM,eAAe;QACnB,aAAa,UAAU,CAAC;QACxB,aAAa,UAAU,CAAC;QAExB,cAAc;QACd,OAAO,QAAQ,CAAC,IAAI,GAAG;IACzB;IAEA,qBACE,8OAAC;QAAI,WAAU;QAAsB,KAAK;;0BACxC,8OAAC;gBAAI,WAAU;gBAAY,SAAS,IAAM,cAAc,UAAU,CAAC;0BACjE,cAAA,8OAAC,4JAAA,CAAA,UAAI;oBAAC,MAAM,aAAa,MAAM;8BAC7B,cAAA,8OAAC;wBAAE,WAAU;;;;;;;;;;;;;;;;YAIhB,cAAc,wBACb,8OAAC;gBAAI,WAAU;0BAEb,cAAA,8OAAC;;sCACC,8OAAC;sCACC,cAAA,8OAAC,4JAAA,CAAA,UAAI;gCAAC,MAAK;;kDACT,8OAAC;wCAAE,WAAU;;;;;;oCAA8B;;;;;;;;;;;;sCAG/C,8OAAC;4BAAG,WAAU;sCACZ,cAAA,8OAAC;gCAAO,SAAS;;kDACf,8OAAC;wCAAE,WAAU;;;;;;oCAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ5D","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file://F%3A/REACT/DU%20AN%20TN/Pure-Botanica/src/app/user/context/CartContext.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// Tạo Context\r\nconst CartContext = createContext<{\r\n  checkoutData: any;\r\n  setCheckoutData: (data: any) => void;\r\n} | undefined>(undefined);\r\n\r\n// Tạo Provider để bao bọc ứng dụng\r\nexport function CartProvider({ children }: { children: React.ReactNode }) {\r\n  const [checkoutData, setCheckoutData] = useState<any>(() => {\r\n    // Chỉ khởi tạo từ localStorage nếu chạy ở client-side\r\n    if (typeof window !== \"undefined\") {\r\n      const savedData = localStorage.getItem(\"checkoutData\");\r\n      return savedData ? JSON.parse(savedData) : null;\r\n    }\r\n    return null;\r\n  });\r\n\r\n  // Đồng bộ checkoutData với localStorage chỉ ở client-side\r\n  useEffect(() => {\r\n    if (typeof window !== \"undefined\") {\r\n      if (checkoutData) {\r\n        localStorage.setItem(\"checkoutData\", JSON.stringify(checkoutData));\r\n      } else {\r\n        localStorage.removeItem(\"checkoutData\");\r\n      }\r\n    }\r\n  }, [checkoutData]);\r\n\r\n  return (\r\n    <CartContext.Provider value={{ checkoutData, setCheckoutData }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook để sử dụng Context\r\nexport function useCart() {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error(\"useCart must be used within a CartProvider\");\r\n  }\r\n  return context;\r\n}"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAIA,cAAc;AACd,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAGjB;AAGR,SAAS,aAAa,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAO;QACpD,sDAAsD;QACtD,uCAAmC;;QAGnC;QACA,OAAO;IACT;IAEA,0DAA0D;IAC1D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,uCAAmC;;QAMnC;IACF,GAAG;QAAC;KAAa;IAEjB,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAc;QAAgB;kBAC1D;;;;;;AAGP;AAGO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}